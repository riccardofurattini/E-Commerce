services:
  # Servizio per il database di Magazzino
  magazzino-db:
    image: postgres:15
    container_name: magazzino-db
    environment:
      - POSTGRES_USER=magazzino_user
      - POSTGRES_PASSWORD=p4ssw0rD
      - POSTGRES_DB=magazzino_db
    ports:
      - "2433:5432"  # Mappa la porta 2433 dell'host alla porta 5432 del container
    volumes:
      - magazzino-data:/var/lib/postgresql/data  # Persistenza dei dati
    networks:
      - my-network

  # Servizio per il database di Store
  store-db:
    image: postgres:15
    container_name: store-db
    environment:
      - POSTGRES_USER=store_user
      - POSTGRES_PASSWORD=p4ssw0rD
      - POSTGRES_DB=store_db
    ports:
      - "2434:5432"  # Mappa la porta 2434 dell'host alla porta 5432 del container
    volumes:
      - store-data:/var/lib/postgresql/data  # Persistenza dei dati
    networks:
      - my-network

  # Servizio Adminer per la gestione dei database via web
  adminer:
    image: adminer:4.8.1
    container_name: adminer
    ports:
      - "2431:8080"  # Mappa la porta 2431 dell'host alla porta 8080 del container
    environment:
      TZ: Europe/Rome
      ADMINER_DEFAULT_SERVER: magazzino-db  # Nome del container PostgreSQL di Magazzino
    networks:
      - my-network

  # Servizio per il microservizio Magazzino
  magazzino:
    build:
      context: ./Magazzino  # Specifica il contesto come la cartella Magazzino
      dockerfile: Dockerfile  # Questo è il nome del Dockerfile all'interno di Magazzino (puoi ometterlo se è il nome predefinito "Dockerfile")
    container_name: magazzino
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: "http://+:8080"  # Configura l'URL di ascolto per il container
      
    ports:
      - "8080:8080"  
    depends_on:
      - magazzino-db  
    networks:
      - my-network
    restart: always  # servizio verrà riavviato in caso di crash

  store:
    build:
      context: ./Store  # Specifica il contesto come la cartella Magazzino
      dockerfile: Dockerfile  # Questo è il nome del Dockerfile all'interno di Magazzino (puoi ometterlo se è il nome predefinito "Dockerfile")
    container_name: store
    environment:
      ASPNETCORE_ENVIRONMENT: Development
      ASPNETCORE_URLS: "http://+:8080"  # Configura l'URL di ascolto per il container
      
    ports:
      - "8081:8080"  
    depends_on:
      - store-db  
    networks:
      - my-network
    restart: always  # servizio verrà riavviato in caso di crash

  zookeeper:
    container_name: zookeeper
    image: 'bitnami/zookeeper:3.9.0'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - my-network

  kafka:
    container_name: kafka
    image: 'bitnami/kafka:3.1.0'
    ports:
      - '9092:9092'
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    depends_on:
      - zookeeper
    networks:
      - my-network


networks:
  my-network:
    external: true

volumes:
  magazzino-data:
  store-data:
  fornitore-data:
  pagamento-data:
